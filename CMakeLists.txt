CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
project (RTQL8)
message(STATUS "Generate makefile/project file for RTQL8")
set(Boost_DEBUG ON)
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_VERSION_PATCH "2")
SET(CPACK_PACKAGE_NAME "RTQL8")
SET(CPACK_SYSTEM_NAME "i386")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "glutg3 (>= 3.7), glutg3-dev (>= 3.7), cmake (>=2.8), cmake-curses-gui (>=2.8)")

message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")



###############################################
# SETTING: Global settings
INCLUDE_DIRECTORIES("src")

#SET(BUILD_SHARED_LIBS OFF)
SET(CMAKE_CXX_WARNING_LEVEL 4)
SET(EIGEN_DIR ${CMAKE_SOURCE_DIR}/thirdparty/eigen-3.1.2)

if (WIN32)
  message(STATUS "Setup Visual Studio Specific Flags")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /Zi /Gy /EHsc /arch:SSE2")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /Zi /Gy /EHsc /O2 /arch:SSE2")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /wd4996 /wd4244 /wd4305 /wd4146 /wd4018")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /wd4005 /wd4996 /wd4244 /wd4305 /wd4146 /wd4018 /wd4819 /wd4995")
  SET(CMAKE_DEBUG_POSTFIX "d")
  # set(CMAKE_EXE_LINKER_FLAGS "/LTCG:STATUS")# "${CMAKE_EXE_LINKER_FLAGS} /LTCG:STATUS")
  # set(STATIC_LIBRARY_FLAGS "/LTCG:STATUS") #"${CMAKE_MODULE_LINKER_FLAGS} /LTCG:STATUS")
  # set(CMAKE_MODULE_LINKER_FLAGS "/LTCG:STATUS") #"${CMAKE_MODULE_LINKER_FLAGS} /LTCG:STATUS")

  SET(CMAKE_INSTALL_PREFIX "C:/RTQL8" )

  message(STATUS "--------------------------------------------------")
  message(STATUS "additional setting for Windows")
  message(STATUS "include_directories: C:/dev/packages/include")
  include_directories(C:/dev/packages/include)
  message(STATUS "link_directories:    C:/dev/packages/lib")
  link_directories   (C:/dev/packages/lib)
  message(STATUS "--------------------------------------------------")
#elseif (APPLE)
#elseif (UNIX AND NOT APPLE)
elseif (UNIX)  
  # SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
  if ("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -msse2 -g -fPIC")
    SET(CMAKE_DEBUG_POSTFIX "d")
  else ()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -O3 -fPIC")
  endif ()
  SET(CMAKE_INSTALL_PREFIX "/usr/local" CACHE STRING "Install Prefix")
endif()

###############################################
# Setting for the cluster server
# force-6.pace.gatech.edu 
message(STATUS "Additional setting for cluster...")
message(STATUS "CXX_FLAGS = ${CMAKE_CXX_FLAGS}")

if(EXISTS "/nv/hp16/sha9/thirdparty/include/")
message(STATUS "Add Include Directory: /nv/hp16/sha9/thirdparty/include/")
include_directories(/nv/hp16/sha9/thirdparty/include)
else()
message(STATUS "Skip Include Directory: /nv/hp16/sha9/thirdparty/include/")
endif()

if(EXISTS "/nv/hp16/sha9/thirdparty/lib/")
message(STATUS "Add Include Directory: /nv/hp16/sha9/thirdparty/lib/")
link_directories   (/nv/hp16/sha9/thirdparty/lib)
else()
message(STATUS "Skip Include Directory: /nv/hp16/sha9/thirdparty/lib/")
endif()


###############################################
# Generate the path header file
SET(PATH_HEADER_DIR ${CMAKE_SOURCE_DIR}/src/utils/Paths.h)
message(STATUS "Generate the path header file to  ${PATH_HEADER_DIR}")
FILE( WRITE ${PATH_HEADER_DIR} "// This file is automatically generated from CMake\n")
FILE(APPEND ${PATH_HEADER_DIR} "#ifndef UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "#define UTILS_PATHS_H\n")
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define RTQL8_ROOT_PATH \"${CMAKE_SOURCE_DIR}/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define RTQL8_DATA_PATH \"${CMAKE_SOURCE_DIR}/data/\"\n")
FILE(APPEND ${PATH_HEADER_DIR} 
    "#define WRTQL8_DATA_PATH L\"${CMAKE_SOURCE_DIR}/data/\"\n")
	
FILE(APPEND ${PATH_HEADER_DIR} "\n")
FILE(APPEND ${PATH_HEADER_DIR} "#endif // ifndef UTILS_PATHS_H\n")

###############################################
# User specific settings
INCLUDE(Directories.cmake)
INCLUDE(ThirdParties.cmake)

# FIND_PATH( MATHPLOT_INCLUDE_DIR NAMES mathplot2.h )
# message(STATUS "INCLUDES = ${CMAKE_INCLUDE_PATH}")
# message(STATUS "MATHPLOT = ${MATHPLOT_INCLUDE_DIR}")

###############################################
# Find important packages
FIND_PACKAGE(OpenGL)
IF (OPENGL_FOUND)
MESSAGE(STATUS "OPENGL FOUND")
#MESSAGE(${OPENGL_LIBRARIES})
ELSE (OPENGL_FOUND)
MESSAGE(STATUS "OPENGL NOT FOUND")
ENDIF ()

if (WIN32)
    SET(GLUT_glut_LIBRARY glut32)
    MESSAGE(STATUS "GLUT FOUND")
    MESSAGE(STATUS ${GLUT_glut_LIBRARY})
else()
    FIND_PACKAGE(GLUT)
    IF (GLUT_FOUND)
        MESSAGE(STATUS "GLUT FOUND")
        #MESSAGE(${GLUT_glut_LIBRARY})
    ELSE (GLUT_FOUND)
        MESSAGE(STATUS "GLUT NOT FOUND")
    ENDIF ()
endif()

###############################################
message(STATUS "Building RTQL8 source")
ADD_SUBDIRECTORY(thirdparty/ticpp)
ADD_SUBDIRECTORY(src)

###############################################
# Install Targets
# Generate the RTQL8 CMake Config file
SET(RTQL8_CONFIG ${CMAKE_BINARY_DIR}/RTQL8Config.cmake)
message(STATUS "Generating ${RTQL8_CONFIG}")
FILE( WRITE ${RTQL8_CONFIG} "# This file is automatically generated from CMake\n")
FILE(APPEND ${RTQL8_CONFIG} "# Include this file in CMakeLists.txt with \n# INCLUDE(\${CMAKE_INSTALL_PREFIX}/share/RTQL8/RTQL8Config.cmake) \n\n")
FILE(APPEND ${RTQL8_CONFIG} "\nINCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include)")
FILE(APPEND ${RTQL8_CONFIG} "\nINCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include/rtql8)")
FILE(APPEND ${RTQL8_CONFIG} "\nINCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include/eigen-3.1.2)")
FILE(APPEND ${RTQL8_CONFIG} "\nSET(RTQL8_HEADERS ${CMAKE_INSTALL_PREFIX}/include/rtql8 ${CMAKE_INSTALL_PREFIX}/include)")
FILE(APPEND ${RTQL8_CONFIG} "\n\nLINK_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/lib)")
#FILE(APPEND ${RTQL8_CONFIG} "\nSET(RTQL8_LIBRARIES optimized collision optimized dynamics optimized geometry optimized kinematics optimized planning optimized renderer optimized utils debug collisiond debug dynamicsd debug geometryd debug kinematicsd debug planningd debug rendererd debug utilsd)")
if ("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  FILE(APPEND ${RTQL8_CONFIG} "\nSET(RTQL8_LIBRARIES ticppd collisiond dynamicsd geometryd integrationd kinematicsd lcpsolverd optimizerd rendererd simulationd utilsd yuid)")
else ()
  FILE(APPEND ${RTQL8_CONFIG} "\nSET(RTQL8_LIBRARIES ticpp collision dynamics geometry integration kinematics lcpsolver optimizer renderer simulation utils yui)")
endif ()
FILE(APPEND ${RTQL8_CONFIG} "\n\n")
INSTALL(FILES ${RTQL8_CONFIG} DESTINATION share/RTQL8)

# Install Eigen
INSTALL(DIRECTORY ${EIGEN_DIR}/Eigen DESTINATION include/eigen-3.1.2)
INSTALL(DIRECTORY ${EIGEN_DIR}/unsupported DESTINATION include/eigen-3.1.2)
INSTALL(FILES ${EIGEN_DIR}/signature_of_eigen3_matrix_library DESTINATION include/eigen-3.1.2)

###############################################
# Doxygen
FIND_PACKAGE(Doxygen)
IF (DOXYGEN_FOUND)

  SET(DOXYGEN_INPUT "Doxyfile")
  SET(DOXYGEN_OUTPUT "doc")

  ADD_CUSTOM_COMMAND(
    OUTPUT ${DOXYGEN_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${DOXYGEN_INPUT}
    )

  ADD_CUSTOM_TARGET(docs DEPENDS ${DOXYGEN_OUTPUT})
  # ADD_CUSTOM_TARGET(apidoc ALL DEPENDS ${DOXYGEN_OUTPUT})

  ADD_CUSTOM_TARGET(docs_forced
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

ENDIF (DOXYGEN_FOUND)

###############################################
# Enable a test targets for running CTest executables
enable_testing()
add_test (unittests ${CMAKE_SOURCE_DIR}/bin/unittests)
add_test (test_core_collision ${CMAKE_SOURCE_DIR}/bin/test_core_collision)

###############################################
# Package Installer

SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Karen Liu (www.cc.gatech.edu/~karenliu/)")

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "RTQL8: Multibody Dynamics Simulator.")
SET(CPACK_PACKAGE_VENDOR "Computer Graphics Lab at GT")

INCLUDE(CPack)
