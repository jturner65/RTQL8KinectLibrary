message(STATUS "--------------------------------------------------")
message(STATUS "configuring knowledge project")
message(STATUS "--------------------------------------------------")

message(STATUS "options: ")

option(KN_USE_KINECT "use kinect"            ON)
option(KN_USE_MPI    "use mpi optimization" OFF)

option(KN_COMPILE_SOLVER "compile solver"  OFF)
option(KN_COMPILE_GUI    "compile gui"      ON)
option(KN_COMPILE_SERVER "compile server"  OFF)

message(STATUS "KN_USE_KINECT  = ${KN_USE_KINECT}")
message(STATUS "KN_USE_MPI     = ${KN_USE_MPI}")
message(STATUS "KN_COMPILE_SOLVER = ${KN_COMPILE_SOLVER}")
message(STATUS "KN_COMPILE_GUI    = ${KN_COMPILE_GUI}")
message(STATUS "KN_COMPILE_SERVER = ${KN_COMPILE_SERVER}")

if (KN_USE_KINECT)
add_definitions(-DKN_USE_KINECT)
endif()

if (KN_USE_MPI)
add_definitions(-DKN_USE_MPI)
endif()

if (KN_COMPILE_SOLVER)
add_definitions(-DKN_COMPILE_SOLVER)
endif()

if (KN_COMPILE_SERVER)
message(STATUS "We depress the boost_log.")
add_definitions(-DKN_DEPRESS_BOOST_LOG)
endif()

message(STATUS "--------------------------------------------------")


site_name(KN_SITE_NAME)
message(STATUS "site name = ${KN_SITE_NAME}")
set(KN_CLUSTER_ENV OFF)
if (KN_SITE_NAME STREQUAL "force-6.pace.gatech.edu")
   message(STATUS "Detect the cluster environment!!!")
   set(KN_CLUSTER_ENV ON)
   add_definitions(-DKN_CLUSTER_ENV)
endif()
message(STATUS "--------------------------------------------------")

###############################################
# Use local include as well. (need for shark)
include_directories(/usr/local/include)
include_directories(${CMAKE_SOURCE_DIR}/src/apps/knowledge/)
include_directories(${CMAKE_SOURCE_DIR}/src/apps/knowledge/thirdparty)
include_directories(${CMAKE_SOURCE_DIR}/src/apps/knowledge/thirdparty/rapidxml)

###############################################
# Qt
if (KN_COMPILE_GUI)
find_package(Qt4 4.6.0 REQUIRED QtCore QtGui QtXml QtOpenGL)
include(${QT_USE_FILE})
message(STATUS "QT_USE_FILE    = ${QT_USE_FILE}")
message(STATUS "QT_INCLUDES    = ${QT_INCLUDES}")
message(STATUS "QT_LIBRARIES   = ${QT_LIBRARIES}")
endif()

# ###############################################
# # Qt5
# find_package(Qt5Widgets)

###############################################
# Boost

if (KN_CLUSTER_ENV)
  set(BOOST_ROOT /usr/local/packages/boost/1.53.0/)
  set(BOOST_INCLUDEDIR /usr/local/packages/boost/1.53.0/)
  set(BOOST_LIBRARYDIR /usr/local/packages/boost/1.53.0/lib)
  set(Boost_USE_STATIC_LIBS        ON)
  set(Boost_USE_MULTITHREADED     OFF)
  set(Boost_USE_FILESYSTEM         ON)
  set(Boost_USE_STATIC_RUNTIME    OFF)

  message(STATUS "Set the boost environment for cluster...")
else()
  if (WIN32)
    set(Boost_USE_STATIC_LIBS        ON)
    set(Boost_USE_MULTITHREADED     ON)
    set(Boost_USE_FILESYSTEM         ON)
    set(Boost_USE_STATIC_RUNTIME    OFF)
    message(STATUS "Set the boost environment as Windows desktop")
  else()
    set(Boost_USE_STATIC_LIBS        ON)
    set(Boost_USE_MULTITHREADED     OFF)
    set(Boost_USE_FILESYSTEM         ON)
    set(Boost_USE_STATIC_RUNTIME    OFF)
    message(STATUS "Set the boost environment as *nix desktop")

  endif()

endif()

# # In windows, make sure BOOST_ROOT is set.
# # uncomment the following variables for debugging when CMake fails to detect boost
# set(Boost_DEBUG  ON)
# set(Boost_DETAILED_FAILURE_MSG ON)

if (NOT KN_CLUSTER_ENV)
find_package( Boost COMPONENTS date_time system filesystem thread chrono log log_setup)
else()
find_package( Boost COMPONENTS date_time system filesystem thread chrono)
endif()
message(STATUS "Boost_INCLUDE_DIR =  ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost_LIBRARIES =  ${Boost_LIBRARIES}")
include_directories(${Boost_INCLUDE_DIRS})

# ###############################################
# find_package(PythonLibs)
# message(STATUS "PYTHONLIBS_FOUND = ${PYTHONLIBS_FOUND}")
# message(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
# message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
# include_directories(${PYTHON_INCLUDE_DIRS})


###############################################
# Generate the path header file

message(STATUS "--------------------------------------------------")
SET(APP_PATH_HEADER_DIR ${CMAKE_SOURCE_DIR}/src/apps/knowledge/common/Paths.h)
message(STATUS "Generate the path header file to  ${APP_PATH_HEADER_DIR}")
FILE( WRITE ${APP_PATH_HEADER_DIR} "// This file is automatically generated from CMake\n")
FILE(APPEND ${APP_PATH_HEADER_DIR} "#ifndef APP_PATHS_H\n")
FILE(APPEND ${APP_PATH_HEADER_DIR} "#define APP_PATHS_H\n")

FILE(APPEND ${APP_PATH_HEADER_DIR} "\n")
FILE(APPEND ${APP_PATH_HEADER_DIR} 
    "#define APP_BINARY_PATH \"${CMAKE_BINARY_DIR}/\"\n")
FILE(APPEND ${APP_PATH_HEADER_DIR} "\n")
FILE(APPEND ${APP_PATH_HEADER_DIR} "#endif // ifndef APP_PATHS_H\n")


message(STATUS "--------------------------------------------------")
add_subdirectory(thirdparty/cluster)
add_subdirectory(controller)
add_subdirectory(operation)
add_subdirectory(toy)

if (KN_COMPILE_SOLVER)
  add_subdirectory(solver)
endif()

if (KN_COMPILE_GUI)
  add_subdirectory(gui)
endif()

if (KN_COMPILE_SERVER)
   add_subdirectory(server)
endif()

# Utility projects
# add_subdirectory(benchmark)

# add_subdirectory(controller2)
# add_subdirectory(mpisolver)
# if (UNIX)
# add_subdirectory(mpisolver2)
# endif()

# add_subdirectory(mpiclient)
message(STATUS "--------------------------------------------------")
message(STATUS "configuring parkour project is finished")
message(STATUS "--------------------------------------------------")

